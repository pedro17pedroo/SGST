import mysql from 'mysql2/promise';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

async function populateTables() {
  let connection: mysql.Connection | null = null;
  
  try {
    console.log('üîå Conectando ao banco de dados...');
    
    if (!process.env.DATABASE_URL) {
      throw new Error('DATABASE_URL n√£o encontrada nas vari√°veis de ambiente');
    }
    
    const url = new URL(process.env.DATABASE_URL);
    
    connection = await mysql.createConnection({
      host: url.hostname,
      user: url.username,
      password: url.password,
      database: url.pathname.slice(1),
      port: parseInt(url.port || '3306'),
      ssl: {
        rejectUnauthorized: false
      }
    });
    
    console.log('‚úÖ Conectado ao banco de dados!');
    
    // Popular tabela vehicle_types
    console.log('üöõ Populando tabela vehicle_types...');
    const vehicleTypes = [
      ['Cami√£o', 'Ve√≠culo pesado para transporte de carga', 'heavy_duty'],
      ['Carrinha', 'Ve√≠culo comercial ligeiro para transporte de carga e passageiros', 'commercial'],
      ['Autocarro', 'Ve√≠culo para transporte p√∫blico de passageiros', 'passenger'],
      ['T√°xi', 'Ve√≠culo para transporte individual de passageiros', 'passenger'],
      ['Motocicleta', 'Ve√≠culo de duas rodas para transporte r√°pido', 'light'],
      ['Tractor', 'Ve√≠culo agr√≠cola para trabalhos no campo', 'agricultural'],
      ['Empilhadora', 'Ve√≠culo industrial para movimenta√ß√£o de cargas', 'industrial'],
      ['Ambul√¢ncia', 'Ve√≠culo de emerg√™ncia m√©dica', 'emergency'],
      ['Viatura Policial', 'Ve√≠culo de seguran√ßa p√∫blica', 'emergency'],
      ['Cami√£o Cisterna', 'Ve√≠culo especializado para transporte de l√≠quidos', 'specialized']
    ];
    
    for (const [name, description, category] of vehicleTypes) {
      try {
        await connection.execute(
          'INSERT IGNORE INTO vehicle_types (name, description, category) VALUES (?, ?, ?)',
          [name, description, category]
        );
        console.log(`‚úÖ Inserido: ${name}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  J√° existe: ${name}`);
      }
    }
    
    // Popular tabela fuel_types
    console.log('‚õΩ Populando tabela fuel_types...');
    const fuelTypes = [
      ['Gas√≥leo', 'Combust√≠vel diesel comum em Angola', 'liquid', 'litros'],
      ['Gasolina', 'Combust√≠vel gasolina para ve√≠culos ligeiros', 'liquid', 'litros'],
      ['G√°s Natural', 'Combust√≠vel gasoso comprimido', 'gas', 'm¬≥'],
      ['GPL', 'G√°s de Petr√≥leo Liquefeito', 'gas', 'kg'],
      ['Biodiesel', 'Combust√≠vel renov√°vel derivado de √≥leos vegetais', 'liquid', 'litros'],
      ['Etanol', 'Combust√≠vel √°lcool et√≠lico', 'liquid', 'litros'],
      ['Querosene', 'Combust√≠vel para avia√ß√£o e aquecimento', 'liquid', 'litros'],
      ['Fuel Oil', 'Combust√≠vel pesado para navios e ind√∫stria', 'liquid', 'litros'],
      ['Electricidade', 'Energia el√©ctrica para ve√≠culos el√©ctricos', 'electric', 'kWh'],
      ['Hidrog√©nio', 'Combust√≠vel de c√©lula de combust√≠vel', 'gas', 'kg']
    ];
    
    for (const [name, description, category, unit] of fuelTypes) {
      try {
        await connection.execute(
          'INSERT IGNORE INTO fuel_types (name, description, category, unit) VALUES (?, ?, ?, ?)',
          [name, description, category, unit]
        );
        console.log(`‚úÖ Inserido: ${name}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  J√° existe: ${name}`);
      }
    }
    
    // Verificar contagens finais
    console.log('üìä Verificando dados inseridos...');
    const [vtCount] = await connection.execute('SELECT COUNT(*) as total FROM vehicle_types');
    const [ftCount] = await connection.execute('SELECT COUNT(*) as total FROM fuel_types');
    
    console.log(`üöõ Total de tipos de ve√≠culos: ${(vtCount as any[])[0].total}`);
    console.log(`‚õΩ Total de tipos de combust√≠veis: ${(ftCount as any[])[0].total}`);
    
  } catch (error) {
    console.error('‚ùå Erro:', error instanceof Error ? error.message : String(error));
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Conex√£o fechada.');
    }
  }
}

// Executar a popula√ß√£o
populateTables().then(() => {
  console.log('üéâ Popula√ß√£o das tabelas conclu√≠da!');
}).catch((error) => {
  console.error('‚ùå Erro na popula√ß√£o:', error instanceof Error ? error.message : String(error));
});